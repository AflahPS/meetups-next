{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aflah/Documents/React Trials/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nfunction MeetupDetailsPage(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    title: \"third Meetup\",\n    image: \"https://images.unsplash.com/photo-1464817739973-0128fe77aaa1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n    description: \"This is the third description\",\n    address: \"rome, Italy\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n_c = MeetupDetailsPage;\nexport var __N_SSG = true;\nexport default MeetupDetailsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetailsPage\");","map":{"version":3,"sources":["/home/aflah/Documents/React Trials/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MeetupDetails","MeetupDetailsPage","props"],"mappings":";;AAEA,OAAOA,aAAP,MAA0B,wCAA1B;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAC,cADR;AAEE,IAAA,KAAK,EAAC,+JAFR;AAGE,IAAA,WAAW,EAAC,+BAHd;AAIE,IAAA,OAAO,EAAC;AAJV;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;KATQD,iB;;AAyET,eAAeA,iBAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\n\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nfunction MeetupDetailsPage(props) {\n  return (\n    <MeetupDetails\n      title=\"third Meetup\"\n      image=\"https://images.unsplash.com/photo-1464817739973-0128fe77aaa1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n      description=\"This is the third description\"\n      address=\"rome, Italy\"\n    />\n  );\n}\n\nasync function getMeetups(id = null) {\n  try {\n    const client = await MongoClient.connect(\n      \"mongodb://localhost:27017/meetup\"\n    );\n    const db = client.db();\n    const meetupColl = db.collection(\"meetups\");\n    let result;\n    if (!id) {\n      result = await meetupColl.find().toArray();\n    } else {\n      result = await meetupColl.findOne({ _id: ObjectId(id) });\n    }\n    const serializedResult = result.map((meet) => {\n      return {\n        id: meet._id.toString(),\n        title: meet.title,\n        image: meet.image,\n        description: meet.description,\n        address: meet.address,\n      };\n    });\n    client.close();\n    return serializedResult;\n  } catch (er) {\n    console.log(er.message);\n  }\n}\n\nexport async function getStaticPaths() {\n  const meetups = await getMeetups();\n  return {\n    paths: meetups.map((meet) => {\n      params: {\n        meetupId: meet.id;\n      }\n    }),\n    fallback: false,\n  };\n}\n\nexport async function getStaticProps(context) {\n  // Fetch data from the server or API\n  try {\n    const meetupId = context.params.meetupId;\n    console.log(\"ðŸš€ ~ file: index.js:66 ~ getStaticProps ~ meetupId\", meetupId);\n    const meetupsData = await getMeetups(meetupId);\n    console.log(\n      \"ðŸš€ ~ file: index.js:68 ~ getStaticProps ~ meetupsData\",\n      meetupsData\n    );\n\n    return {\n      props: {\n        meetupsData: meetupsData[0],\n      },\n    };\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\nexport default MeetupDetailsPage;\n"]},"metadata":{},"sourceType":"module"}