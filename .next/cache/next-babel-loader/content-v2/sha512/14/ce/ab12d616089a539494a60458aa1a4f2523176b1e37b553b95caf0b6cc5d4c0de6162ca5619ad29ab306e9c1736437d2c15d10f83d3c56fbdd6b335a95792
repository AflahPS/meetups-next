{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aflah/Documents/React Trials/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport { useRouter } from \"next/router\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nfunction MeetupDetailsPage() {\n  const router = useRouter();\n  const meetupId = router.query.meetupId;\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    title: \"third Meetup\",\n    image: \"https://images.unsplash.com/photo-1464817739973-0128fe77aaa1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\",\n    description: \"This is the third description\",\n    address: \"rome, Italy\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n\nasync function getMeetups(id = null) {\n  try {\n    const client = await MongoClient.connect(\"mongodb://localhost:27017/meetup\");\n    const db = client.db();\n    const meetupColl = db.collection(\"meetups\");\n    let result;\n\n    if (!id) {\n      result = await meetupColl.find().toArray();\n    } else {\n      result = await meetupColl.findOne({\n        _id: ObjectId(id)\n      });\n    }\n\n    const serializedResult = result.map(meet => {\n      return {\n        id: meet._id.toString(),\n        title: meet.title,\n        image: meet.image,\n        description: meet.description,\n        address: meet.address\n      };\n    });\n    client.close();\n    return serializedResult;\n  } catch (er) {\n    console.log(er.message);\n  }\n}\n\nexport async function getStaticPaths() {\n  const meetups = await getMeetups();\n  console.log(meetups);\n  return {\n    paths: meetups.map(meet => {\n      params: {\n        meetupId: meet.id;\n      }\n    }),\n    fallback: false\n  };\n}\nexport async function getStaticProps(context) {\n  // Fetch data from the server or API\n  try {\n    const meetupId = context.params.meetupId;\n    const meetupsData = await getMeetups(meetupId);\n    return {\n      props: {\n        meetupsData: meetupsData[0]\n      },\n      revalidate: 1\n    };\n  } catch (err) {\n    console.log(err);\n  }\n}\nexport default MeetupDetailsPage;","map":{"version":3,"sources":["/home/aflah/Documents/React Trials/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["useRouter","MongoClient","ObjectId","MeetupDetails","MeetupDetailsPage","router","meetupId","query","getMeetups","id","client","connect","db","meetupColl","collection","result","find","toArray","findOne","_id","serializedResult","map","meet","toString","title","image","description","address","close","er","console","log","message","getStaticPaths","meetups","paths","params","fallback","getStaticProps","context","meetupsData","props","revalidate","err"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,aAAP,MAA0B,wCAA1B;;AAEA,SAASC,iBAAT,GAA6B;AAC3B,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAMM,QAAQ,GAAGD,MAAM,CAACE,KAAP,CAAaD,QAA9B;AAEA,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAC,cADR;AAEE,IAAA,KAAK,EAAC,+JAFR;AAGE,IAAA,WAAW,EAAC,+BAHd;AAIE,IAAA,OAAO,EAAC;AAJV;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,eAAeE,UAAf,CAA0BC,EAAE,GAAG,IAA/B,EAAqC;AACnC,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACnB,kCADmB,CAArB;AAGA,UAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,UAAMC,UAAU,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAnB;AACA,QAAIC,MAAJ;;AACA,QAAI,CAACN,EAAL,EAAS;AACPM,MAAAA,MAAM,GAAG,MAAMF,UAAU,CAACG,IAAX,GAAkBC,OAAlB,EAAf;AACD,KAFD,MAEO;AACLF,MAAAA,MAAM,GAAG,MAAMF,UAAU,CAACK,OAAX,CAAmB;AAAEC,QAAAA,GAAG,EAAEjB,QAAQ,CAACO,EAAD;AAAf,OAAnB,CAAf;AACD;;AACD,UAAMW,gBAAgB,GAAGL,MAAM,CAACM,GAAP,CAAYC,IAAD,IAAU;AAC5C,aAAO;AACLb,QAAAA,EAAE,EAAEa,IAAI,CAACH,GAAL,CAASI,QAAT,EADC;AAELC,QAAAA,KAAK,EAAEF,IAAI,CAACE,KAFP;AAGLC,QAAAA,KAAK,EAAEH,IAAI,CAACG,KAHP;AAILC,QAAAA,WAAW,EAAEJ,IAAI,CAACI,WAJb;AAKLC,QAAAA,OAAO,EAAEL,IAAI,CAACK;AALT,OAAP;AAOD,KARwB,CAAzB;AASAjB,IAAAA,MAAM,CAACkB,KAAP;AACA,WAAOR,gBAAP;AACD,GAvBD,CAuBE,OAAOS,EAAP,EAAW;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAYF,EAAE,CAACG,OAAf;AACD;AACF;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,OAAO,GAAG,MAAM1B,UAAU,EAAhC;AACAsB,EAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;AACA,SAAO;AACLC,IAAAA,KAAK,EAAED,OAAO,CAACb,GAAR,CAAaC,IAAD,IAAU;AAC3Bc,MAAAA,MAAM,EAAE;AACN9B,QAAAA,QAAQ,EAAEgB,IAAI,CAACb,EAAL;AACX;AACF,KAJM,CADF;AAML4B,IAAAA,QAAQ,EAAE;AANL,GAAP;AAQD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA,MAAI;AACF,UAAMjC,QAAQ,GAAGiC,OAAO,CAACH,MAAR,CAAe9B,QAAhC;AACA,UAAMkC,WAAW,GAAG,MAAMhC,UAAU,CAACF,QAAD,CAApC;AAEA,WAAO;AACLmC,MAAAA,KAAK,EAAE;AACLD,QAAAA,WAAW,EAAEA,WAAW,CAAC,CAAD;AADnB,OADF;AAILE,MAAAA,UAAU,EAAE;AAJP,KAAP;AAMD,GAVD,CAUE,OAAOC,GAAP,EAAY;AACZb,IAAAA,OAAO,CAACC,GAAR,CAAYY,GAAZ;AACD;AACF;AAED,eAAevC,iBAAf","sourcesContent":["import { useRouter } from \"next/router\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nfunction MeetupDetailsPage() {\n  const router = useRouter();\n  const meetupId = router.query.meetupId;\n\n  return (\n    <MeetupDetails\n      title=\"third Meetup\"\n      image=\"https://images.unsplash.com/photo-1464817739973-0128fe77aaa1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\"\n      description=\"This is the third description\"\n      address=\"rome, Italy\"\n    />\n  );\n}\n\nasync function getMeetups(id = null) {\n  try {\n    const client = await MongoClient.connect(\n      \"mongodb://localhost:27017/meetup\"\n    );\n    const db = client.db();\n    const meetupColl = db.collection(\"meetups\");\n    let result;\n    if (!id) {\n      result = await meetupColl.find().toArray();\n    } else {\n      result = await meetupColl.findOne({ _id: ObjectId(id) });\n    }\n    const serializedResult = result.map((meet) => {\n      return {\n        id: meet._id.toString(),\n        title: meet.title,\n        image: meet.image,\n        description: meet.description,\n        address: meet.address,\n      };\n    });\n    client.close();\n    return serializedResult;\n  } catch (er) {\n    console.log(er.message);\n  }\n}\n\nexport async function getStaticPaths() {\n  const meetups = await getMeetups();\n  console.log(meetups);\n  return {\n    paths: meetups.map((meet) => {\n      params: {\n        meetupId: meet.id;\n      }\n    }),\n    fallback: false,\n  };\n}\n\nexport async function getStaticProps(context) {\n  // Fetch data from the server or API\n  try {\n    const meetupId = context.params.meetupId;\n    const meetupsData = await getMeetups(meetupId);\n\n    return {\n      props: {\n        meetupsData: meetupsData[0],\n      },\n      revalidate: 1,\n    };\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default MeetupDetailsPage;\n"]},"metadata":{},"sourceType":"module"}