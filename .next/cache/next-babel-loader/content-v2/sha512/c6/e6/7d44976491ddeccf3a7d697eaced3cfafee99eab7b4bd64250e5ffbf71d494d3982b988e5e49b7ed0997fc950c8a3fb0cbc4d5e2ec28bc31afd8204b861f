{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aflah/Documents/React Trials/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nfunction MeetupDetailsPage(_ref) {\n  var meetupsData = _ref.meetupsData;\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    title: meetupsData.title,\n    image: meetupsData.image,\n    description: meetupsData.description,\n    address: meetupsData.address\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\n_c = MeetupDetailsPage;\nexport var __N_SSG = true;\nexport default MeetupDetailsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetailsPage\");","map":{"version":3,"sources":["/home/aflah/Documents/React Trials/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MeetupDetails","MeetupDetailsPage","meetupsData","title","image","description","address"],"mappings":";;AAEA,OAAOA,aAAP,MAA0B,wCAA1B;;AAGA,SAASC,iBAAT,OAA4C;AAAA,MAAfC,WAAe,QAAfA,WAAe;AAC1C,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAEA,WAAW,CAACC,KADrB;AAEE,IAAA,KAAK,EAAED,WAAW,CAACE,KAFrB;AAGE,IAAA,WAAW,EAAEF,WAAW,CAACG,WAH3B;AAIE,IAAA,OAAO,EAAEH,WAAW,CAACI;AAJvB;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;KATQL,iB;;AAsET,eAAeA,iBAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\n\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\nimport { DB_PASSWORD } from \"../../config.env\";\n\nfunction MeetupDetailsPage({ meetupsData }) {\n  return (\n    <MeetupDetails\n      title={meetupsData.title}\n      image={meetupsData.image}\n      description={meetupsData.description}\n      address={meetupsData.address}\n    />\n  );\n}\n\nasync function getMeetups(id = null) {\n  try {\n    const client = await MongoClient.connect(\n      `mongodb+srv://greeny:${DB_PASSWORD}@greeny.z2jivg0.mongodb.net/meetup?retryWrites=true&w=majority`\n    );\n    const db = client.db();\n    const meetupColl = db.collection(\"meetups\");\n    let result;\n    if (!id) {\n      result = await meetupColl.find().toArray();\n    } else {\n      result = await meetupColl.findOne({ _id: ObjectId(id) });\n      result = [result];\n    }\n    const serializedResult = result.map((meet) => {\n      return {\n        id: meet._id.toString(),\n        title: meet.title,\n        image: meet.image,\n        description: meet.description,\n        address: meet.address,\n      };\n    });\n    client.close();\n    return serializedResult;\n  } catch (er) {\n    console.log(er.message);\n  }\n}\n\nexport async function getStaticPaths() {\n  const meetups = await getMeetups();\n  return {\n    paths: meetups.map((meet) => {\n      return {\n        params: {\n          meetupId: meet.id,\n        },\n      };\n    }),\n    fallback: false,\n  };\n}\n\nexport async function getStaticProps(context) {\n  // Fetch data from the server or API\n  try {\n    const meetupId = context.params.meetupId;\n    const meetupsData = await getMeetups(meetupId);\n    return {\n      props: {\n        meetupsData: meetupsData[0],\n      },\n    };\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\nexport default MeetupDetailsPage;\n"]},"metadata":{},"sourceType":"module"}