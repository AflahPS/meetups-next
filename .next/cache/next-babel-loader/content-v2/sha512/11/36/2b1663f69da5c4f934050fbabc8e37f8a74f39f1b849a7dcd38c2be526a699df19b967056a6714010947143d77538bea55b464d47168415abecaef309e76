{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aflah/Documents/React Trials/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nfunction MeetupDetailsPage({\n  meetupsData\n}) {\n  console.log(process.env.DB_PASSWORD);\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    title: meetupsData.title,\n    image: meetupsData.image,\n    description: meetupsData.description,\n    address: meetupsData.address\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\nasync function getMeetups(id = null) {\n  try {\n    const client = await MongoClient.connect(`mongodb+srv://greeny:${process.env.DB_PASSWORD}@greeny.z2jivg0.mongodb.net/meetup?retryWrites=true&w=majority`);\n    const db = client.db();\n    const meetupColl = db.collection(\"meetups\");\n    let result;\n\n    if (!id) {\n      result = await meetupColl.find().toArray();\n    } else {\n      result = await meetupColl.findOne({\n        _id: ObjectId(id)\n      });\n      result = [result];\n    }\n\n    const serializedResult = result.map(meet => {\n      return {\n        id: meet._id.toString(),\n        title: meet.title,\n        image: meet.image,\n        description: meet.description,\n        address: meet.address\n      };\n    });\n    client.close();\n    return serializedResult;\n  } catch (er) {\n    console.log(er.message);\n  }\n}\n\nexport async function getStaticPaths() {\n  const meetups = await getMeetups();\n  return {\n    paths: meetups.map(meet => {\n      return {\n        params: {\n          meetupId: meet.id\n        }\n      };\n    }),\n    fallback: false\n  };\n}\nexport async function getStaticProps(context) {\n  // Fetch data from the server or API\n  try {\n    const meetupId = context.params.meetupId;\n    const meetupsData = await getMeetups(meetupId);\n    return {\n      props: {\n        meetupsData: meetupsData[0]\n      }\n    };\n  } catch (err) {\n    console.log(err.message);\n  }\n}\nexport default MeetupDetailsPage;","map":{"version":3,"sources":["/home/aflah/Documents/React Trials/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetails","MeetupDetailsPage","meetupsData","console","log","process","env","DB_PASSWORD","title","image","description","address","getMeetups","id","client","connect","db","meetupColl","collection","result","find","toArray","findOne","_id","serializedResult","map","meet","toString","close","er","message","getStaticPaths","meetups","paths","params","meetupId","fallback","getStaticProps","context","props","err"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AAEA,OAAOC,aAAP,MAA0B,wCAA1B;;AAEA,SAASC,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAA4C;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,WAAxB;AACA,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAEL,WAAW,CAACM,KADrB;AAEE,IAAA,KAAK,EAAEN,WAAW,CAACO,KAFrB;AAGE,IAAA,WAAW,EAAEP,WAAW,CAACQ,WAH3B;AAIE,IAAA,OAAO,EAAER,WAAW,CAACS;AAJvB;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AAED,eAAeC,UAAf,CAA0BC,EAAE,GAAG,IAA/B,EAAqC;AACnC,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMhB,WAAW,CAACiB,OAAZ,CAClB,wBAAuBV,OAAO,CAACC,GAAR,CAAYC,WAAY,gEAD7B,CAArB;AAGA,UAAMS,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,UAAMC,UAAU,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAnB;AACA,QAAIC,MAAJ;;AACA,QAAI,CAACN,EAAL,EAAS;AACPM,MAAAA,MAAM,GAAG,MAAMF,UAAU,CAACG,IAAX,GAAkBC,OAAlB,EAAf;AACD,KAFD,MAEO;AACLF,MAAAA,MAAM,GAAG,MAAMF,UAAU,CAACK,OAAX,CAAmB;AAAEC,QAAAA,GAAG,EAAExB,QAAQ,CAACc,EAAD;AAAf,OAAnB,CAAf;AACAM,MAAAA,MAAM,GAAG,CAACA,MAAD,CAAT;AACD;;AACD,UAAMK,gBAAgB,GAAGL,MAAM,CAACM,GAAP,CAAYC,IAAD,IAAU;AAC5C,aAAO;AACLb,QAAAA,EAAE,EAAEa,IAAI,CAACH,GAAL,CAASI,QAAT,EADC;AAELnB,QAAAA,KAAK,EAAEkB,IAAI,CAAClB,KAFP;AAGLC,QAAAA,KAAK,EAAEiB,IAAI,CAACjB,KAHP;AAILC,QAAAA,WAAW,EAAEgB,IAAI,CAAChB,WAJb;AAKLC,QAAAA,OAAO,EAAEe,IAAI,CAACf;AALT,OAAP;AAOD,KARwB,CAAzB;AASAG,IAAAA,MAAM,CAACc,KAAP;AACA,WAAOJ,gBAAP;AACD,GAxBD,CAwBE,OAAOK,EAAP,EAAW;AACX1B,IAAAA,OAAO,CAACC,GAAR,CAAYyB,EAAE,CAACC,OAAf;AACD;AACF;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,OAAO,GAAG,MAAMpB,UAAU,EAAhC;AACA,SAAO;AACLqB,IAAAA,KAAK,EAAED,OAAO,CAACP,GAAR,CAAaC,IAAD,IAAU;AAC3B,aAAO;AACLQ,QAAAA,MAAM,EAAE;AACNC,UAAAA,QAAQ,EAAET,IAAI,CAACb;AADT;AADH,OAAP;AAKD,KANM,CADF;AAQLuB,IAAAA,QAAQ,EAAE;AARL,GAAP;AAUD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA,MAAI;AACF,UAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,UAAMjC,WAAW,GAAG,MAAMU,UAAU,CAACuB,QAAD,CAApC;AACA,WAAO;AACLI,MAAAA,KAAK,EAAE;AACLrC,QAAAA,WAAW,EAAEA,WAAW,CAAC,CAAD;AADnB;AADF,KAAP;AAKD,GARD,CAQE,OAAOsC,GAAP,EAAY;AACZrC,IAAAA,OAAO,CAACC,GAAR,CAAYoC,GAAG,CAACV,OAAhB;AACD;AACF;AAED,eAAe7B,iBAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\n\nimport MeetupDetails from \"../../components/meetups/MeetupDetails\";\n\nfunction MeetupDetailsPage({ meetupsData }) {\n  console.log(process.env.DB_PASSWORD);\n  return (\n    <MeetupDetails\n      title={meetupsData.title}\n      image={meetupsData.image}\n      description={meetupsData.description}\n      address={meetupsData.address}\n    />\n  );\n}\n\nasync function getMeetups(id = null) {\n  try {\n    const client = await MongoClient.connect(\n      `mongodb+srv://greeny:${process.env.DB_PASSWORD}@greeny.z2jivg0.mongodb.net/meetup?retryWrites=true&w=majority`\n    );\n    const db = client.db();\n    const meetupColl = db.collection(\"meetups\");\n    let result;\n    if (!id) {\n      result = await meetupColl.find().toArray();\n    } else {\n      result = await meetupColl.findOne({ _id: ObjectId(id) });\n      result = [result];\n    }\n    const serializedResult = result.map((meet) => {\n      return {\n        id: meet._id.toString(),\n        title: meet.title,\n        image: meet.image,\n        description: meet.description,\n        address: meet.address,\n      };\n    });\n    client.close();\n    return serializedResult;\n  } catch (er) {\n    console.log(er.message);\n  }\n}\n\nexport async function getStaticPaths() {\n  const meetups = await getMeetups();\n  return {\n    paths: meetups.map((meet) => {\n      return {\n        params: {\n          meetupId: meet.id,\n        },\n      };\n    }),\n    fallback: false,\n  };\n}\n\nexport async function getStaticProps(context) {\n  // Fetch data from the server or API\n  try {\n    const meetupId = context.params.meetupId;\n    const meetupsData = await getMeetups(meetupId);\n    return {\n      props: {\n        meetupsData: meetupsData[0],\n      },\n    };\n  } catch (err) {\n    console.log(err.message);\n  }\n}\n\nexport default MeetupDetailsPage;\n"]},"metadata":{},"sourceType":"module"}